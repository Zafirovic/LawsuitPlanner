// <auto-generated />
using System;
using Application.Models.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Application.Migrations
{
    [DbContext(typeof(LawsuitDataContext))]
    [Migration("20200424224105_Finalize2")]
    partial class Finalize2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Application.Models.Company", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("address")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("name")
                        .HasColumnType("varchar(40)");

                    b.HasKey("id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Application.Models.Contact", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("address")
                        .HasColumnType("varchar(40)");

                    b.Property<int?>("companyid");

                    b.Property<string>("email")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("job")
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("legalPerson");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("phone1")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("phone2")
                        .HasColumnType("varchar(10)");

                    b.HasKey("id");

                    b.HasIndex("companyid");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Application.Models.Lawsuit", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("courtType");

                    b.Property<string>("courtroomNumber")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime>("dateTimeOfEvent");

                    b.Property<int?>("defendantid");

                    b.Property<int?>("judgeid");

                    b.Property<int?>("locationid");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("processId")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("prosecutorid");

                    b.Property<int?>("typeOfProcessid");

                    b.HasKey("id");

                    b.HasIndex("defendantid");

                    b.HasIndex("judgeid");

                    b.HasIndex("locationid");

                    b.HasIndex("prosecutorid");

                    b.HasIndex("typeOfProcessid");

                    b.ToTable("Lawsuits");
                });

            modelBuilder.Entity("Application.Models.LawsuitLawyer", b =>
                {
                    b.Property<int>("userId");

                    b.Property<int>("lawsuitId");

                    b.Property<string>("userId1");

                    b.HasKey("userId", "lawsuitId");

                    b.HasIndex("lawsuitId");

                    b.HasIndex("userId1");

                    b.ToTable("LawsuitLawyer");
                });

            modelBuilder.Entity("Application.Models.Location", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("cityName")
                        .HasColumnType("varchar(40)");

                    b.HasKey("id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Application.Models.TypeOfProcess", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name")
                        .HasColumnType("varchar(40)");

                    b.HasKey("id");

                    b.ToTable("TypeOfProcesses");
                });

            modelBuilder.Entity("Application.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Application.Models.Contact", b =>
                {
                    b.HasOne("Application.Models.Company", "company")
                        .WithMany()
                        .HasForeignKey("companyid");
                });

            modelBuilder.Entity("Application.Models.Lawsuit", b =>
                {
                    b.HasOne("Application.Models.Contact", "defendant")
                        .WithMany()
                        .HasForeignKey("defendantid");

                    b.HasOne("Application.Models.Contact", "judge")
                        .WithMany()
                        .HasForeignKey("judgeid");

                    b.HasOne("Application.Models.Location", "location")
                        .WithMany()
                        .HasForeignKey("locationid");

                    b.HasOne("Application.Models.Contact", "prosecutor")
                        .WithMany()
                        .HasForeignKey("prosecutorid");

                    b.HasOne("Application.Models.TypeOfProcess", "typeOfProcess")
                        .WithMany()
                        .HasForeignKey("typeOfProcessid");
                });

            modelBuilder.Entity("Application.Models.LawsuitLawyer", b =>
                {
                    b.HasOne("Application.Models.Lawsuit", "lawsuit")
                        .WithMany("lawyers")
                        .HasForeignKey("lawsuitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Application.Models.User", "user")
                        .WithMany("lawsuit")
                        .HasForeignKey("userId1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Application.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Application.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Application.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Application.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
