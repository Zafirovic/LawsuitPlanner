// <auto-generated />
using System;
using Application.Models.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Application.Migrations
{
    [DbContext(typeof(LawsuitDataContext))]
    [Migration("20200412165901_PrezimeColumn")]
    partial class PrezimeColumn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Application.Models.Kompanija", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("adresa")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("naziv")
                        .HasColumnType("varchar(40)");

                    b.HasKey("id");

                    b.ToTable("Kompanije");
                });

            modelBuilder.Entity("Application.Models.Kontakt", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("adresa")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("email")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ime")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("kompanijaid");

                    b.Property<bool>("pravnoLice");

                    b.Property<string>("telefon1")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("telefon2")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("zanimanje")
                        .HasColumnType("varchar(30)");

                    b.HasKey("id");

                    b.HasIndex("kompanijaid");

                    b.ToTable("Kontakti");
                });

            modelBuilder.Entity("Application.Models.Korisnik", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<int?>("Parnicaid");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("ime")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("prezime")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("Parnicaid");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Application.Models.Lokacija", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("naslov")
                        .HasColumnType("varchar(40)");

                    b.HasKey("id");

                    b.ToTable("Lokacije");
                });

            modelBuilder.Entity("Application.Models.Parnica", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("brojSudnice")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime>("datumVremeOdrzavanja");

                    b.Property<string>("idPostupka")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("lokacijaid");

                    b.Property<string>("napomena")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("sudijaid");

                    b.Property<int?>("tipPostupkaid");

                    b.Property<int>("tipSuda");

                    b.Property<int?>("tuzenikid");

                    b.Property<int?>("tuzilacid");

                    b.HasKey("id");

                    b.HasIndex("lokacijaid");

                    b.HasIndex("sudijaid");

                    b.HasIndex("tipPostupkaid");

                    b.HasIndex("tuzenikid");

                    b.HasIndex("tuzilacid");

                    b.ToTable("Parnice");
                });

            modelBuilder.Entity("Application.Models.TipPostupka", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("naslov")
                        .HasColumnType("varchar(40)");

                    b.HasKey("id");

                    b.ToTable("TipPostupaka");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Application.Models.Kontakt", b =>
                {
                    b.HasOne("Application.Models.Kompanija", "kompanija")
                        .WithMany()
                        .HasForeignKey("kompanijaid");
                });

            modelBuilder.Entity("Application.Models.Korisnik", b =>
                {
                    b.HasOne("Application.Models.Parnica")
                        .WithMany("advokati")
                        .HasForeignKey("Parnicaid");
                });

            modelBuilder.Entity("Application.Models.Parnica", b =>
                {
                    b.HasOne("Application.Models.Lokacija", "lokacija")
                        .WithMany()
                        .HasForeignKey("lokacijaid");

                    b.HasOne("Application.Models.Kontakt", "sudija")
                        .WithMany()
                        .HasForeignKey("sudijaid");

                    b.HasOne("Application.Models.TipPostupka", "tipPostupka")
                        .WithMany()
                        .HasForeignKey("tipPostupkaid");

                    b.HasOne("Application.Models.Kontakt", "tuzenik")
                        .WithMany()
                        .HasForeignKey("tuzenikid");

                    b.HasOne("Application.Models.Kontakt", "tuzilac")
                        .WithMany()
                        .HasForeignKey("tuzilacid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Application.Models.Korisnik")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Application.Models.Korisnik")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Application.Models.Korisnik")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Application.Models.Korisnik")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
